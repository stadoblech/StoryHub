//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleForTestingServices.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthorizationService")]
    public interface IAuthorizationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/VerifyPassword", ReplyAction="http://tempuri.org/IAuthorizationService/VerifyPasswordResponse")]
        System.Tuple<string, bool> VerifyPassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/VerifyPassword", ReplyAction="http://tempuri.org/IAuthorizationService/VerifyPasswordResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, bool>> VerifyPasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/VerifyEmail", ReplyAction="http://tempuri.org/IAuthorizationService/VerifyEmailResponse")]
        System.Tuple<string, bool> VerifyEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/VerifyEmail", ReplyAction="http://tempuri.org/IAuthorizationService/VerifyEmailResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, bool>> VerifyEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/Register", ReplyAction="http://tempuri.org/IAuthorizationService/RegisterResponse")]
        System.Tuple<string, bool> Register(string email, string password, bool news, string appLanguage, bool useLiveTile, string[] contentLanguages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/Register", ReplyAction="http://tempuri.org/IAuthorizationService/RegisterResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, bool>> RegisterAsync(string email, string password, bool news, string appLanguage, bool useLiveTile, string[] contentLanguages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/RemoveUser", ReplyAction="http://tempuri.org/IAuthorizationService/RemoveUserResponse")]
        System.Tuple<string, bool> RemoveUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/RemoveUser", ReplyAction="http://tempuri.org/IAuthorizationService/RemoveUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, bool>> RemoveUserAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorizationServiceChannel : ConsoleForTestingServices.ServiceReference1.IAuthorizationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizationServiceClient : System.ServiceModel.ClientBase<ConsoleForTestingServices.ServiceReference1.IAuthorizationService>, ConsoleForTestingServices.ServiceReference1.IAuthorizationService {
        
        public AuthorizationServiceClient() {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<string, bool> VerifyPassword(string email, string password) {
            return base.Channel.VerifyPassword(email, password);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, bool>> VerifyPasswordAsync(string email, string password) {
            return base.Channel.VerifyPasswordAsync(email, password);
        }
        
        public System.Tuple<string, bool> VerifyEmail(string email) {
            return base.Channel.VerifyEmail(email);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, bool>> VerifyEmailAsync(string email) {
            return base.Channel.VerifyEmailAsync(email);
        }
        
        public System.Tuple<string, bool> Register(string email, string password, bool news, string appLanguage, bool useLiveTile, string[] contentLanguages) {
            return base.Channel.Register(email, password, news, appLanguage, useLiveTile, contentLanguages);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, bool>> RegisterAsync(string email, string password, bool news, string appLanguage, bool useLiveTile, string[] contentLanguages) {
            return base.Channel.RegisterAsync(email, password, news, appLanguage, useLiveTile, contentLanguages);
        }
        
        public System.Tuple<string, bool> RemoveUser(string email) {
            return base.Channel.RemoveUser(email);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, bool>> RemoveUserAsync(string email) {
            return base.Channel.RemoveUserAsync(email);
        }
    }
}
